{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Windows\\\\.cursor-tutor\\\\roofing-job-board\\\\frontend\\\\src\\\\components\\\\JobCard.js\";\nimport React from 'react';\nimport './JobCard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst JobCard = ({\n  job,\n  onClick\n}) => {\n  // Function to strip HTML tags and get plain text\n  const stripHtml = html => {\n    const tmp = document.createElement('div');\n    tmp.innerHTML = html;\n    return tmp.textContent || tmp.innerText || '';\n  };\n\n  // Get a preview of the description (first 150 chars, without HTML tags)\n  const getDescriptionPreview = () => {\n    const plainText = stripHtml(job.description || '');\n    return plainText.substring(0, 150) + (plainText.length > 150 ? '...' : '');\n  };\n\n  // Add this function to format the job function text\n  const formatJobFunction = jobFunction => {\n    if (!jobFunction) return '';\n    return jobFunction.charAt(0).toUpperCase() + jobFunction.slice(1).toLowerCase();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"job-card\",\n    onClick: () => onClick(job),\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"job-title\",\n      children: job.job_title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"job-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"location\",\n        children: job.location\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this), job.salary_range && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"salary\",\n        children: job.salary_range\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 30\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"job-type\",\n      children: [job.employment_type && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"employment-type\",\n        children: job.employment_type\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this), job.remote_type && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"remote-type\",\n        children: job.remote_type\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this), job.job_function && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"job-function\",\n        children: formatJobFunction(job.job_function)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"view-details\",\n      children: \"View Details\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n_c = JobCard;\nexport default JobCard;\nvar _c;\n$RefreshReg$(_c, \"JobCard\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","JobCard","job","onClick","stripHtml","html","tmp","document","createElement","innerHTML","textContent","innerText","getDescriptionPreview","plainText","description","substring","length","formatJobFunction","jobFunction","charAt","toUpperCase","slice","toLowerCase","className","children","job_title","fileName","_jsxFileName","lineNumber","columnNumber","location","salary_range","employment_type","remote_type","job_function","_c","$RefreshReg$"],"sources":["C:/Users/Windows/.cursor-tutor/roofing-job-board/frontend/src/components/JobCard.js"],"sourcesContent":["import React from 'react';\r\nimport './JobCard.css';\r\n\r\nconst JobCard = ({ job, onClick }) => {\r\n  // Function to strip HTML tags and get plain text\r\n  const stripHtml = (html) => {\r\n    const tmp = document.createElement('div');\r\n    tmp.innerHTML = html;\r\n    return tmp.textContent || tmp.innerText || '';\r\n  };\r\n\r\n  // Get a preview of the description (first 150 chars, without HTML tags)\r\n  const getDescriptionPreview = () => {\r\n    const plainText = stripHtml(job.description || '');\r\n    return plainText.substring(0, 150) + (plainText.length > 150 ? '...' : '');\r\n  };\r\n\r\n  // Add this function to format the job function text\r\n  const formatJobFunction = (jobFunction) => {\r\n    if (!jobFunction) return '';\r\n    return jobFunction.charAt(0).toUpperCase() + jobFunction.slice(1).toLowerCase();\r\n  };\r\n\r\n  return (\r\n    <div className=\"job-card\" onClick={() => onClick(job)}>\r\n      <h3 className=\"job-title\">{job.job_title}</h3>\r\n      <div className=\"job-info\">\r\n        <p className=\"location\">{job.location}</p>\r\n        {job.salary_range && <p className=\"salary\">{job.salary_range}</p>}\r\n      </div>\r\n      <div className=\"job-type\">\r\n        {job.employment_type && (\r\n          <span className=\"employment-type\">{job.employment_type}</span>\r\n        )}\r\n        {job.remote_type && (\r\n          <span className=\"remote-type\">{job.remote_type}</span>\r\n        )}\r\n        {job.job_function && (\r\n          <span className=\"job-function\">{formatJobFunction(job.job_function)}</span>\r\n        )}\r\n      </div>\r\n      <button className=\"view-details\">View Details</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default JobCard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}